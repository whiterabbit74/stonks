#!/bin/bash

# üöÄ –£–ú–ù–´–ô –î–ï–ü–õ–û–ô –°–ò–°–¢–ï–ú–´ –ù–ê –°–ï–†–í–ï–†
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
check_requirements() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã..."

    required_files=("docker-compose.yml" "nginx.conf" ".env")
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: $file"
            exit 1
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å TypeScript –≤ JS —Ñ–∞–π–ª–∞—Ö
    if grep -r ":\s*\(string\|number\|boolean\|Array\|Record\)" server/ --include="*.js" | grep -v "//"; then
        log_error "–ù–∞–π–¥–µ–Ω TypeScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ JavaScript —Ñ–∞–π–ª–∞—Ö!"
        log_error "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º:"
        grep -r ":\s*\(string\|number\|boolean\|Array\|Record\)" server/ --include="*.js" | grep -v "//"
        exit 1
    fi

    log_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
cleanup_old_images() {
    log_info "–û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã..."

    # –£–¥–∞–ª–∏—Ç—å dangling –æ–±—Ä–∞–∑—ã (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ)
    docker image prune -f

    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
    docker images --format "table {{.Repository}}\t{{.ID}}" | grep -E "(stonks-server|stonks-frontend)" | tail -n +4 | while read repo id; do
        if [[ -n "$id" ]]; then
            log_info "–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–∑: $repo ($id)"
            docker rmi "$id" 2>/dev/null || true
        fi
    done

    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    log_info "–°–æ–∑–¥–∞—é –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."

    backup_dir="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏
    docker logs stonks-server > "$backup_dir/server.log" 2>&1 || true
    docker logs stonks-frontend > "$backup_dir/frontend.log" 2>&1 || true

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cp docker-compose.yml "$backup_dir/" 2>/dev/null || true
    cp nginx.conf "$backup_dir/" 2>/dev/null || true
    cp .env "$backup_dir/" 2>/dev/null || true

    log_info "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_dir"
}

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
rebuild_and_deploy() {
    log_info "–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é –∏ –∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å—ã..."

    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    docker compose down

    # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –∫—ç—à–µ–º (–±—ã—Å—Ç—Ä–µ–µ)
    docker compose build

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    docker compose up -d

    # –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞
    log_info "–ñ–¥—É –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    if docker compose ps | grep -q "Up"; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å!"
        docker compose logs
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."

    max_attempts=10
    attempt=1

    while [ $attempt -le $max_attempts ]; do
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend
        if curl -f -s http://localhost/ > /dev/null 2>&1; then
            log_success "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
            frontend_ok=true
        else
            log_warning "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            frontend_ok=false
        fi

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API
        if curl -f -s http://localhost:3001/api/status > /dev/null 2>&1; then
            log_success "API –¥–æ—Å—Ç—É–ø–µ–Ω"
            api_ok=true
        else
            log_warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            api_ok=false
        fi

        if [[ "$frontend_ok" == "true" && "$api_ok" == "true" ]]; then
            log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–¥–æ—Ä–æ–≤—ã!"
            return 0
        fi

        sleep 10
        ((attempt++))
    done

    log_error "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –ø—Ä–æ—à–ª–∏ health check!"
    docker compose logs
    return 1
}

# –†–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
rollback() {
    log_error "–í—ã–ø–æ–ª–Ω—è—é –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."

    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    docker compose down

    # –ù–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–∑
    prev_server=$(docker images stonks-server --format "{{.ID}}" | sed -n '2p')
    prev_frontend=$(docker images stonks-frontend --format "{{.ID}}" | sed -n '2p')

    if [[ -n "$prev_server" && -n "$prev_frontend" ]]; then
        log_info "–ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–∑—ã: server=$prev_server, frontend=$prev_frontend"

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏
        PREV_SERVER_IMAGE=$prev_server PREV_FRONTEND_IMAGE=$prev_frontend docker compose up -d

        log_warning "–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã."
    else
        log_error "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –†—É—á–Ω–∞—è –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è."
        exit 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "üöÄ –ù–ê–ß–ò–ù–ê–Æ –î–ï–ü–õ–û–ô –°–ò–°–¢–ï–ú–´"
    echo "========================================"

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_requirements

    # –®–∞–≥ 2: –û—á–∏—Å—Ç–∫–∞
    cleanup_old_images

    # –®–∞–≥ 3: –ë—ç–∫–∞–ø
    create_backup

    # –®–∞–≥ 4: –î–µ–ø–ª–æ–π
    if rebuild_and_deploy; then
        # –®–∞–≥ 5: Health check
        if health_check; then
            log_success "üéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!"
            log_info "–°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã:"
            log_info "  - Frontend: http://localhost/"
            log_info "  - API: http://localhost:3001/api/"
            log_info "  - Production: https://tradingibs.site/"
        else
            log_error "Health check –ø—Ä–æ–≤–∞–ª–µ–Ω!"
            rollback
            exit 1
        fi
    else
        log_error "–î–µ–ø–ª–æ–π –ø—Ä–æ–≤–∞–ª–µ–Ω!"
        rollback
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@"