#!/bin/bash
# üõ°Ô∏è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ –∫–æ–¥–∞ –∏–∑ GitHub
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./super-reliable-deploy.sh

set -e

echo "üõ°Ô∏è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø"
echo "=========================================="

# 1. –ü–†–û–í–ï–†–ö–ê –ò –û–¢–ü–†–ê–í–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ì–û –ö–û–î–ê –ù–ê GITHUB
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub..."
git fetch origin

# –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
    echo "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ commit:"
    git status
    exit 1
fi

# –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
LOCAL_COMMITS_AHEAD=$(git rev-list --count origin/main..HEAD 2>/dev/null || echo "0")
if [ "$LOCAL_COMMITS_AHEAD" -gt 0 ]; then
    echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£ –≤–∞—Å –µ—Å—Ç—å $LOCAL_COMMITS_AHEAD –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤!"
    echo "–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã:"
    git log --oneline origin/main..HEAD
    echo ""
    read -p "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ GitHub –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–∏—Ç—ã –Ω–∞ GitHub..."
        git push origin main
        echo "‚úÖ –ö–æ–º–º–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
    else
        echo "‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–∏—Ç—ã: git push origin main"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å GitHub
LOCAL_COMMIT=$(git rev-parse HEAD)
REMOTE_COMMIT=$(git rev-parse origin/main)

if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
    echo "‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub"
    echo "–õ–æ–∫–∞–ª—å–Ω—ã–π:  $(git rev-parse --short HEAD) - $(git log -1 --format=%s)"
    echo "GitHub:     $(git rev-parse --short origin/main) - $(git log -1 --format=%s origin/main)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    if git merge-base --is-ancestor origin/main HEAD; then
        echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–æ–≤–µ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub..."
        git push origin main
        echo "üì§ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ GitHub"
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º remote HEAD –ø–æ—Å–ª–µ push
        git fetch origin
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω remote HEAD –ø–æ—Å–ª–µ push"
    else
        echo "‚ùå –û–®–ò–ë–ö–ê: –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å GitHub! –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —Ä–∞–∑—Ä–µ—à–∏—Ç—å"
        echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: git pull --rebase origin main"
        exit 1
    fi
else
    echo "‚úÖ –ö–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub"
fi

# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ GitHub –ø–æ–ª—É—á–∏–ª –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..."
FINAL_LOCAL=$(git rev-parse HEAD)
FINAL_REMOTE=$(git rev-parse origin/main)

if [ "$FINAL_LOCAL" != "$FINAL_REMOTE" ]; then
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: GitHub –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
    echo "–õ–æ–∫–∞–ª—å–Ω—ã–π: $FINAL_LOCAL"
    echo "GitHub:    $FINAL_REMOTE" 
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–µ–ø–ª–æ—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞"
    exit 1
else
    echo "‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ - GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
fi

# 2. –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò –ö–û–î–ê
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –∫–æ–¥–∞..."
GIT_COMMIT=$(git rev-parse --short HEAD)
GIT_DATE=$(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')
echo "üìã –í–µ—Ä—Å–∏—è: ${GIT_COMMIT} –æ—Ç ${GIT_DATE}"

# 3. –°–ë–û–†–ö–ê –° –û–ß–ò–°–¢–ö–û–ô
echo "üì¶ –°–±–æ—Ä–∫–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π..."
rm -rf dist/
npm run build

# 4. –ü–†–û–í–ï–†–ö–ê –°–ë–û–†–ö–ò
if [ ! -f "dist/index.html" ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!"
    exit 1
fi

# 5. –°–û–ó–î–ê–ù–ò–ï –ê–†–•–ò–í–ê –° –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
ARCHIVE_NAME="super-fresh-${GIT_COMMIT}-${TIMESTAMP}.tgz"
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: ${ARCHIVE_NAME}"

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
echo "{
  \"commit\": \"${GIT_COMMIT}\",
  \"date\": \"${GIT_DATE}\",
  \"timestamp\": \"${TIMESTAMP}\",
  \"build_time\": \"$(date)\"
}" > build-info.json

tar -czf "${ARCHIVE_NAME}" dist/ server/ build-info.json

# 6. –û–¢–ü–†–ê–í–ö–ê –ù–ê –°–ï–†–í–ï–†
echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp "${ARCHIVE_NAME}" ubuntu@146.235.212.239:~

# 7. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –ù–ê–î–ï–ñ–ù–û–°–¢–¨–Æ
echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é..."
ssh ubuntu@146.235.212.239 "
cd ~ &&

echo 'üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞...' &&
tar -xzf ${ARCHIVE_NAME} &&

echo 'üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...' &&
cd ~/stonks &&
git fetch origin &&
git reset --hard origin/main &&
echo '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:' &&
git log --oneline -1 &&

echo 'üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–ï–†–í–ï–†–ê...' &&
# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
docker compose down || true

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
echo '–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤...' &&
docker system prune -f || true

# –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo '–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...' &&
rm -rf ~/stonks/dist/* &&
rm -rf ~/stonks/server/server.js.backup 2>/dev/null || true

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ server.js
cp ~/stonks/server/server.js ~/stonks/server/server.js.backup 2>/dev/null || true

echo 'üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤...' &&
if [ ! -d ~/dist ]; then
    echo '‚ùå –û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ~/dist –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
    ls -la ~/ | grep -E '(dist|server|build-info)'
    exit 1
fi &&
if [ ! -f ~/dist/index.html ]; then
    echo '‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª ~/dist/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!'
    ls -la ~/dist/
    exit 1
fi &&
if [ ! -d ~/server ]; then
    echo '‚ùå –û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ~/server –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
    ls -la ~/ | grep -E '(dist|server|build-info)'
    exit 1
fi &&
if [ ! -f ~/server/server.js ]; then
    echo '‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª ~/server/server.js –Ω–µ –Ω–∞–π–¥–µ–Ω!'
    ls -la ~/server/
    exit 1
fi &&
echo '–ö–æ–ø–∏—Ä—É–µ–º frontend —Ñ–∞–π–ª—ã...' &&
cp -r ~/dist/* ~/stonks/dist/ &&
echo '–ö–æ–ø–∏—Ä—É–µ–º server —Ñ–∞–π–ª—ã...' &&
cp -r ~/server/* ~/stonks/server/ &&

echo 'üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–µ...' &&
cp ~/build-info.json ~/stonks/build-info.json &&

echo 'üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...' &&
cd ~/stonks &&
docker compose build &&
if [ $? -ne 0 ]; then
    echo '‚ùå –û–®–ò–ë–ö–ê: –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å!'
    exit 1
fi &&
echo 'üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...' &&
docker compose up -d &&
if [ $? -ne 0 ]; then
    echo '‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è!'
    echo '–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:' && docker compose ps -a
    exit 1
fi &&

echo '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (30 —Å–µ–∫)...' &&
sleep 30 &&

echo '‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø:' &&
echo '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:' &&
docker ps --format 'table {{.Names}}\t{{.Status}}' &&

echo -e '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ:' &&
cat ~/stonks/build-info.json &&

echo -e '\n–°–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã:' &&
docker exec stonks-frontend find /usr/share/nginx/html/assets -name 'index-*.js' -exec ls -la {} \\; 2>/dev/null || echo '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω' &&

echo -e '\n–¢–µ—Å—Ç API:' &&
timeout 15 curl -s https://tradingibs.site/api/status | head -1 2>/dev/null || echo 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' &&

# –û—á–∏—Å—Ç–∫–∞
rm ~/${ARCHIVE_NAME} ~/build-info.json ~/server/ ~/dist/ -rf
"

# 8. –£–ë–ï–ñ–î–ê–ï–ú–°–Ø –ß–¢–û –ö–û–ù–¢–ï–ô–ù–ï–†–´ –ó–ê–ü–£–©–ï–ù–´
echo "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
ssh ubuntu@146.235.212.239 "
cd ~/stonks &&
echo '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...' &&
docker compose ps &&
echo '–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã)...' &&
docker compose up -d
"

# 9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
echo "üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê..."
sleep 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
if curl -s -I https://tradingibs.site/ | grep -q "200"; then
    echo "‚úÖ –°–ê–ô–¢ –î–û–°–¢–£–ü–ï–ù!"
else
    echo "‚ö†Ô∏è  –°–ê–ô–¢ –ù–ï–î–û–°–¢–£–ü–ï–ù (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è)"
fi

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
rm "${ARCHIVE_NAME}" build-info.json

echo ""
# 10. –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM
echo "üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram..."

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "üîç –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
SETTINGS_RESPONSE=$(ssh ubuntu@146.235.212.239 "docker exec stonks-backend cat /app/server/settings.json 2>/dev/null || echo '{}'" 2>/dev/null || echo "{}")
echo "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $SETTINGS_RESPONSE"

# –ü–∞—Ä—Å–∏–º Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON
if [ -n "$SETTINGS_RESPONSE" ] && [ "$SETTINGS_RESPONSE" != "{}" ]; then
    BOT_TOKEN=$(echo "$SETTINGS_RESPONSE" | grep -o '"botToken":"[^"]*"' | cut -d'"' -f4 || echo "")
    CHAT_ID=$(echo "$SETTINGS_RESPONSE" | grep -o '"chatId":"[^"]*"' | cut -d'"' -f4 || echo "")
    
    echo "ü§ñ Bot Token: ${BOT_TOKEN:0:10}... (–¥–ª–∏–Ω–∞: ${#BOT_TOKEN})"
    echo "üí¨ Chat ID: $CHAT_ID"
    
    if [ -n "$BOT_TOKEN" ] && [ -n "$CHAT_ID" ] && [ "${#BOT_TOKEN}" -gt 10 ] && [ "$CHAT_ID" != "" ]; then
        echo "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        
        MESSAGE="üöÄ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!"
        MESSAGE="$MESSAGE\n\nüíª –í–µ—Ä—Å–∏—è: ${GIT_COMMIT}"
        MESSAGE="$MESSAGE\nüï∞ –î–∞—Ç–∞: ${GIT_DATE}"
        MESSAGE="$MESSAGE\nüåê –°–∞–π—Ç: https://tradingibs.site"
        MESSAGE="$MESSAGE\n\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        
        TELEGRAM_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
             -H "Content-Type: application/x-www-form-urlencoded" \
             -d "chat_id=${CHAT_ID}" \
             -d "text=${MESSAGE}" \
             -d "parse_mode=Markdown" 2>&1)
        
        if echo "$TELEGRAM_RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!"
        else
            echo "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: $TELEGRAM_RESPONSE"
        fi
    else
        echo "‚ö†Ô∏è  Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã"
        echo "   Bot Token length: ${#BOT_TOKEN}, Chat ID: '$CHAT_ID'"
    fi
else
    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API..."
    SETTINGS_RESPONSE=$(curl -s "https://tradingibs.site/api/settings" || echo "")
    echo "üìù –û—Ç–≤–µ—Ç API: $SETTINGS_RESPONSE"
    
    if [ -n "$SETTINGS_RESPONSE" ]; then
        BOT_TOKEN=$(echo "$SETTINGS_RESPONSE" | grep -o '"botToken":"[^"]*"' | cut -d'"' -f4 || echo "")
        CHAT_ID=$(echo "$SETTINGS_RESPONSE" | grep -o '"chatId":"[^"]*"' | cut -d'"' -f4 || echo "")
        
        echo "ü§ñ Bot Token (API): ${BOT_TOKEN:0:10}... (–¥–ª–∏–Ω–∞: ${#BOT_TOKEN})"
        echo "üí¨ Chat ID (API): $CHAT_ID"
        
        if [ -n "$BOT_TOKEN" ] && [ -n "$CHAT_ID" ] && [ "${#BOT_TOKEN}" -gt 10 ] && [ "$CHAT_ID" != "" ]; then
            echo "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
            
            MESSAGE="üöÄ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!"
            MESSAGE="$MESSAGE\n\nüíª –í–µ—Ä—Å–∏—è: ${GIT_COMMIT}"
            MESSAGE="$MESSAGE\nüï∞ –î–∞—Ç–∞: ${GIT_DATE}"
            MESSAGE="$MESSAGE\nüåê –°–∞–π—Ç: https://tradingibs.site"
            MESSAGE="$MESSAGE\n\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
            
            TELEGRAM_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                 -H "Content-Type: application/x-www-form-urlencoded" \
                 -d "chat_id=${CHAT_ID}" \
                 -d "text=${MESSAGE}" \
                 -d "parse_mode=Markdown" 2>&1)
            
            if echo "$TELEGRAM_RESPONSE" | grep -q '"ok":true'; then
                echo "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (—á–µ—Ä–µ–∑ API)!"
            else
                echo "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (API): $TELEGRAM_RESPONSE"
            fi
        else
            echo "‚ö†Ô∏è  Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (API)"
        fi
    else
        echo "‚ö†Ô∏è  API —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
fi

echo ""
echo "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "üìã –í–µ—Ä—Å–∏—è: ${GIT_COMMIT} –æ—Ç ${GIT_DATE}"
echo "üåê –°–∞–π—Ç: https://tradingibs.site"
echo ""
echo "üí° –ì–ê–†–ê–ù–¢–ò–ò –ù–ê–î–ï–ñ–ù–û–°–¢–ò:"
echo "   ‚úÖ –ö–æ–¥ —Ç–æ–ª—å–∫–æ –∏–∑ GitHub (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç)"
echo "   ‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"
echo "   ‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –±–µ–∑ –∫—ç—à–∞"
echo "   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏"
echo "   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
echo "   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
