#!/bin/bash

# üöÄ Trading Backtester - Production Deployment Script
# This script automates the deployment process

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Trading Backtester..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
DOMAIN=${DOMAIN:-"tradingibs.site"}
TLS_CA=${TLS_CA:-"https://acme-v02.api.letsencrypt.org/directory"}

echo -e "${YELLOW}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
echo "  DOMAIN: $DOMAIN"
echo "  TLS_CA: $TLS_CA"

# Warning for staging certificates
if [[ "$TLS_CA" == *"staging"* ]]; then
    echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è STAGING SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!${NC}"
    echo -e "${RED}   –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –¥–æ–≤–µ—Ä–µ–Ω –±—Ä–∞—É–∑–µ—Ä–∞–º–∏.${NC}"
    echo -e "${RED}   –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: TLS_CA=https://acme-v02.api.letsencrypt.org/directory${NC}"
    echo ""
fi

# Function to print status
status() {
    echo -e "${GREEN}‚úì $1${NC}"
}

error() {
    echo -e "${RED}‚úó $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "docker-compose.yml" ]; then
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è docker-compose.yml)"
fi

# Check if .env file exists
if [ ! -f "server/.env" ]; then
    warning "–§–∞–π–ª server/.env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
    cp server/.env.example server/.env
    warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ server/.env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!"
    echo "–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    read
fi

# Update Caddyfile with current domain
status "–û–±–Ω–æ–≤–ª—è—é Caddyfile..."
cat > caddy/Caddyfile <<EOF
# Dynamic domain from environment variable
{$DOMAIN:$DOMAIN} {
  tls {
    ca {$TLS_CA:$TLS_CA}
  }

  encode gzip
  log {
    output file /var/log/caddy/access.log
  }

  handle /api/** {
    reverse_proxy server:3001
  }

  handle {
    reverse_proxy frontend:80
  }
}
EOF

# Set environment variables for docker-compose
export DOMAIN=$DOMAIN
export TLS_CA=$TLS_CA

# Stop existing services
status "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã..."
docker compose down || true

# Start services
status "–ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å—ã..."
docker compose up -d

# Wait for services to start
status "–ñ–¥—É –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

# Check service status
status "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose ps

# Test the application
status "–¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
if curl -k -s -o /dev/null -w "%{http_code}" https://$DOMAIN/api/status | grep -q "200"; then
    status "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!"
    status "üåê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://$DOMAIN"
else
    warning "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
    docker compose logs server
fi

echo ""
echo -e "${GREEN}üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
echo ""
echo "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  docker compose logs          - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
echo "  docker compose restart       - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
echo "  docker compose down          - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
echo ""
echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
echo "  docker compose ps           - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  docker compose logs -f      - —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏"</contents>
</xai:function_call">–°–æ–∑–¥–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
