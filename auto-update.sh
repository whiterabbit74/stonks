#!/bin/bash

# ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REPO_URL="https://github.com/whiterabbit74/stonks.git"
UPDATE_INTERVAL=3600  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
LOG_FILE="auto-update.log"

# –§—É–Ω–∫—Ü–∏–∏
log_info() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SUCCESS] $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [WARNING] $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $1" | tee -a "$LOG_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
check_system_health() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã..."

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    if ! docker ps --format "{{.Names}}" | grep -q "stonks-server"; then
        log_error "stonks-server –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi

    if ! docker ps --format "{{.Names}}" | grep -q "stonks-frontend"; then
        log_error "stonks-frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API
    if ! curl -f -s --max-time 5 http://localhost:3001/api/status > /dev/null 2>&1; then
        log_error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend
    if ! curl -f -s --max-time 5 http://localhost/ > /dev/null 2>&1; then
        log_error "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    log_success "–°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
check_for_updates() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."

    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
    current_commit=$(git rev-parse HEAD 2>/dev/null || echo "unknown")

    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    latest_commit=$(curl -s "https://api.github.com/repos/whiterabbit74/stonks/commits/main" | grep '"sha"' | head -1 | cut -d'"' -f4)

    if [[ -z "$latest_commit" ]]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ"
        return 1
    fi

    log_info "–¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: ${current_commit:0:8}"
    log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${latest_commit:0:8}"

    if [[ "$current_commit" == "$latest_commit" ]]; then
        log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    else
        log_info "–ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
        return 0
    fi
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
apply_updates() {
    log_info "–ü—Ä–∏–º–µ–Ω—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."

    # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
    backup_dir="auto_backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cp docker-compose.yml nginx.conf .env "$backup_dir/" 2>/dev/null || true

    # –°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    log_info "–°–∫–∞—á–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    git fetch origin main
    git reset --hard origin/main

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [[ ! -f "docker-compose.yml" || ! -f "nginx.conf" ]]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        cp "$backup_dir"/* ./ 2>/dev/null || true
        return 1
    fi

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω—ã–π –¥–µ–ø–ª–æ–π
    if [[ -f "deploy.sh" ]]; then
        log_info "–ó–∞–ø—É—Å–∫–∞—é —É–º–Ω—ã–π –¥–µ–ø–ª–æ–π..."
        chmod +x deploy.sh
        ./deploy.sh
    else
        log_warning "deploy.sh –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ–ø–ª–æ–π"
        docker compose down
        docker compose build --no-cache
        docker compose up -d
    fi

    log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup_old_files() {
    log_info "–û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã..."

    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    find . -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true

    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    ls -td backup_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
    ls -td auto_backup_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true

    # –û—á–∏—Å—Ç–∏—Ç—å Docker
    docker system prune -f > /dev/null 2>&1

    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_notification() {
    local message="$1"
    local status="$2"

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏–ª–∏ email
    log_info "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $message (Status: $status)"

    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if [[ -n "$TELEGRAM_BOT_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "text=üöÄ Trading Strategies Update: $message" > /dev/null 2>&1 || true
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "ü§ñ –ù–ê–ß–ò–ù–ê–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï"
    echo "========================================"

    local update_applied=false

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    if ! check_system_health; then
        log_error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        send_notification "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ" "ERROR"
        exit 1
    fi

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if check_for_updates; then
        # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if apply_updates; then
            update_applied=true
            log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if check_system_health; then
                send_notification "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" "SUCCESS"
            else
                send_notification "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞" "WARNING"
            fi
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            send_notification "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" "ERROR"
            exit 1
        fi
    fi

    # –®–∞–≥ 5: –û—á–∏—Å—Ç–∫–∞
    cleanup_old_files

    # –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    echo "========================================"
    if [[ "$update_applied" == "true" ]]; then
        log_success "üéâ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
    else
        log_info "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    fi
}

# –†–µ–∂–∏–º –¥–µ–º–æ–Ω–∞ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)
if [[ "$1" == "daemon" ]]; then
    log_info "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ $UPDATE_INTERVAL —Å–µ–∫—É–Ω–¥)"

    while true; do
        main
        log_info "–ñ–¥—É $UPDATE_INTERVAL —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
        sleep $UPDATE_INTERVAL
    done
else
    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    main
fi
