#!/bin/bash

# üè• –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–î–û–†–û–í–¨–Ø
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."

    local containers=("stonks-server" "stonks-frontend" "stonks-caddy")
    local all_healthy=true

    for container in "${containers[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
            status=$(docker ps --format "{{.Status}}" --filter "name=${container}")
            if [[ $status == *"healthy"* ]] || [[ $status == *"Up"* ]]; then
                log_success "‚úÖ $container: $status"
            else
                log_warning "‚ö†Ô∏è  $container: $status"
                all_healthy=false
            fi
        else
            log_error "‚ùå $container: –ù–ï –ó–ê–ü–£–©–ï–ù"
            all_healthy=false
        fi
    done

    if [[ "$all_healthy" == "true" ]]; then
        log_success "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã"
    fi

    return $([ "$all_healthy" == "true" ])
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
check_api() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é API endpoints..."

    local endpoints=(
        "http://localhost:3001/api/status"
        "http://localhost:3001/api/splits"
        "https://tradingibs.site/api/status"
    )

    local all_ok=true

    for endpoint in "${endpoints[@]}"; do
        if curl -f -s --max-time 10 "$endpoint" > /dev/null 2>&1; then
            log_success "‚úÖ $endpoint: OK"
        else
            status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$endpoint" 2>/dev/null || echo "FAILED")
            if [[ "$status_code" == "401" ]]; then
                log_success "‚úÖ $endpoint: 401 (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"
            else
                log_error "‚ùå $endpoint: HTTP $status_code"
                all_ok=false
            fi
        fi
    done

    if [[ "$all_ok" == "true" ]]; then
        log_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_warning "API –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã"
    fi

    return $([ "$all_ok" == "true" ])
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
check_frontend() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é frontend..."

    local urls=(
        "http://localhost/"
        "https://tradingibs.site/"
    )

    local all_ok=true

    for url in "${urls[@]}"; do
        if curl -f -s --max-time 10 "$url" > /dev/null 2>&1; then
            log_success "‚úÖ $url: OK"

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if curl -s "$url" | grep -q "index-B0SCp-Ld.js"; then
                log_success "  ‚îî‚îÄ JavaScript —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            else
                log_warning "  ‚îî‚îÄ JavaScript —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏"
            fi
        else
            log_error "‚ùå $url: –ù–ï–î–û–°–¢–£–ü–ï–ù"
            all_ok=false
        fi
    done

    if [[ "$all_ok" == "true" ]]; then
        log_success "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_error "Frontend –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã"
    fi

    return $([ "$all_ok" == "true" ])
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã..."

    # –ü–∞–º—è—Ç—å
    mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [[ $mem_usage -gt 80 ]]; then
        log_error "‚ùå –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_usage}%"
    elif [[ $mem_usage -gt 60 ]]; then
        log_warning "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_usage}%"
    else
        log_success "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_usage}%"
    fi

    # –î–∏—Å–∫
    disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [[ $disk_usage -gt 90 ]]; then
        log_error "‚ùå –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    elif [[ $disk_usage -gt 75 ]]; then
        log_warning "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    else
        log_success "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
check_logs() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏..."

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    server_errors=$(docker logs --since 1h stonks-server 2>&1 | grep -i error | wc -l)
    if [[ $server_errors -gt 0 ]]; then
        log_warning "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ $server_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
        docker logs --since 1h stonks-server 2>&1 | grep -i error | tail -5
    else
        log_success "‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ nginx –Ω–∞ –æ—à–∏–±–∫–∏
    nginx_errors=$(docker logs --since 1h stonks-frontend 2>&1 | grep -i error | wc -l)
    if [[ $nginx_errors -gt 0 ]]; then
        log_warning "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ $nginx_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö nginx –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
    else
        log_success "‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö nginx –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "=========================================="
    log_info "üè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´"
    echo "=========================================="

    local overall_status=0

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_containers || overall_status=1
    echo
    check_api || overall_status=1
    echo
    check_frontend || overall_status=1
    echo
    check_resources
    echo
    check_logs

    echo
    echo "=========================================="

    if [[ $overall_status -eq 0 ]]; then
        log_success "üéâ –°–ò–°–¢–ï–ú–ê –ó–î–û–†–û–í–ê!"
    else
        log_error "‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!"
        echo
        log_info "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
        log_info "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs"
        log_info "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker compose restart"
        log_info "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∏—Ç–µ—Å—å: ./rollback.sh"
    fi

    return $overall_status
}

# –ó–∞–ø—É—Å–∫
main "$@"
