services:
  # Production (default) — data in named volumes, secrets via env_file or Docker secrets
  server:
    build:
      context: .
      dockerfile: docker/server.Dockerfile
      args:
        BUILD_ID: "${BUILD_ID:-dev}"
    env_file:
      - ./server/.env
    environment:
      - PORT=3001
      - DATASETS_DIR=/data/datasets
      - SETTINGS_FILE=/data/state/settings.json
      - WATCHES_FILE=/data/state/telegram-watches.json
      - SPLITS_FILE=/data/state/splits.json
    volumes:
      - stonks_datasets:/data/datasets
      - stonks_state:/data/state
    ports:
      - "3001:3001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3001/api/status').then(r=>r.ok?process.exit(0):process.exit(1)).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    container_name: stonks-server

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      args:
        PUBLIC_BASE_PATH: "/"
        VITE_API_BASE: "/api"
        VITE_BUILD_ID: "${BUILD_ID:-dev}"
    depends_on:
      - server
    restart: unless-stopped
    volumes:
      - ./dist:/usr/share/nginx/html:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    environment:
      - PUBLIC_BASE_PATH=/
      - VITE_API_BASE=/api
    container_name: stonks-frontend

  caddy:
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - server
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN:-example.com}
      - TLS_CA=${TLS_CA:-https://acme-staging-v02.api.letsencrypt.org/directory}
    restart: unless-stopped
    container_name: stonks-caddy

  # Development profile — convenient bind mounts to repo files
  server-dev:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: docker/server.Dockerfile
      args:
        BUILD_ID: "${BUILD_ID:-dev}"
    env_file:
      - ./server/.env
    environment:
      - PORT=3001
      - DATASETS_DIR=/data/datasets
      - SETTINGS_FILE=/data/state/settings.json
      - WATCHES_FILE=/data/state/telegram-watches.json
      - SPLITS_FILE=/data/state/splits.json
    volumes:
      - ./server/datasets:/data/datasets
      - ./server/settings.json:/data/state/settings.json
      - ./server/telegram-watches.json:/data/state/telegram-watches.json
      - ./server/splits.json:/data/state/splits.json
    ports:
      - "3001:3001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3001/api/status').then(r=>r.ok?process.exit(0):process.exit(1)).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  frontend-dev:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      args:
        PUBLIC_BASE_PATH: "/"
        VITE_API_BASE: "/api"
        VITE_BUILD_ID: "${BUILD_ID:-dev}"
    depends_on:
      - server-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/api/status" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    environment:
      - PUBLIC_BASE_PATH=/
      - VITE_API_BASE=/api

volumes:
  stonks_datasets:
  stonks_state:
  caddy_data:
    driver: local
  caddy_config:
    driver: local


